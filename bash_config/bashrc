# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
	*i*) ;;
	*) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

#Set vim mode for bash
set -o vi

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=250000
HISTFILESIZE=500000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

#Autocorrect cd misspellings
shopt -s cdspell

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	else
		color_prompt=
	fi
fi

if [ "$color_prompt" = yes ]; then
	PS1="\[\033[01;34m\]\u\[\033[01;34m\]@\[\033[01;34m\]\h\[\033[33m\]:\[\033[01;36m\]\w\[\033[33m\]⚡ \[\033[00m\]"
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

# enable color support of ls
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Add an "alert" alias for long running commands.  Use like so:
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

#Exports somes personal variables
source ~/.config/perso/bash_config/bash_vars
source ~/.config/perso/bash_config/bash_paths

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# Function definitions
if [ -f ~/.bash_funcs ]; then
	.  ~/.bash_funcs
fi

# Completiton definitions
if [ -f ~/.bash_completion ]; then
	.  ~/.bash_completion
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

[ /usr/share/fzf/key-bindings.bash ] && source /usr/share/fzf/key-bindings.bash
[ /usr/share/fzf/completion.bash ] && source /usr/share/fzf/completion.bash



[ -r /home/alex/.byobu/prompt ] && . /home/alex/.byobu/prompt   #byobu-prompt#



export EDITOR='vim'


#Loading some config that is specific to this machine and is not on git
if [ -f ~/.bash_specifics ]; then
	. ~/.bash_specifics
fi


#. /usr/bin/virtualenvwrapper.sh

#Git prompt
GIT_PROMPT_ONLY_IN_REPO=1
source /usr/lib/bash-git-prompt/gitprompt.sh

export GIT_PROMPT_END_USER="\n ⚡ "

LS_COLORS=$LS_COLORS:'ln=4;37:' ; export LS_COLOR

#Build a reference table for the different servers that I use
if [ -d ~/.config/perso/inventory ]; then
	source ~/.config/perso/inventory/index_inventory.sh
fi

export PATH=~/.local/bin:$PATH
export PATH="$PATH:/opt/flutter/bin"
export PATH="$PATH:/opt/android-studio/bin"
export PATH="$PATH:~/.config/perso/tools"

export MPD_HOST=~/.local/run/mpd/socket



# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/.goflow" ] ; then
    . "$HOME/.goflow"
fi

GPG_TTY=$(tty)
export GPG_TTY
