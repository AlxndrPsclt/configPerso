---
# tasks file for workstation

#- debug: var=links_to_create

- name: Configs git usual name
  git_config:
    name: user.name
    scope: global
    value: 'alxndrpsclt'

- name: Configs git usual email
  git_config:
    name: user.email
    scope: global
    value: 'alxndr.psclt@gmail.com'

- name: Configs git editor
  git_config:
    name: core.editor
    scope: global
    value: vim



- name: Install packages for workstation
  become: yes
  pacman:
    name:
      - python-pip
      - vim
      - htop
      - nmap
      - the_silver_searcher
      - fzf
      - fd
      - vifm
      - mlocate
      - strace
      - qrencode
      - wget
      - wpa_supplicant
        #      - youtube-dl
    state: present

- name: enable service wpa_supplicant
  become: yes
  systemd:
    name: wpa_supplicant
    state: started
    enabled: yes
    masked: no

- name: Copy wpa_supplicant file after decrypting it
  become: yes
  copy:
    src: "{{ LOCAL_HOME }}/.config/perso/wpa_supplicant/wpa_supplicant-wlp2s0.conf"
    dest: "/etc/wpa_supplicant/wpa_supplicant-wlp2s0.conf"
    decrypt: yes
    owner: root 
    group: root 
    mode: 400
    backup: no

- name: Clone password-store from server
  git:
    repo: 'git@gitlab.com:AlxndrPsclt/password-store.git'
    dest: "{{ HOME }}/.password-store"
    key_file: "{{ HOME }}/.ssh/keys/id_ed25519.deploy.gitlab.priv"


- name: Install virtualenv & cie using pip     #do not become root for this; better skip thank break something
  pip:
    name:
      - virtualenv
      - virtualenvwrapper
      - ansible
#      - terminal_velocity


- name: Clone personal bashconfig and other usefull configs
  git:
    repo: 'git@github.com:AlxndrPsclt/configPerso.git'
    dest: "{{ HOME }}/.config/perso"
    key_file: "{{ HOME }}/.ssh/keys/id_ed25519.deploy.github.priv"

  #source $CONFIG_PERSO/tools/generateBashSpecifics.sh

- name: Clone personal vimconfig
  git:
    repo: 'git@github.com:AlxndrPsclt/dotvim.git'
    dest: "{{ HOME }}/.vim"
    key_file: "{{ HOME }}/.ssh/keys/id_ed25519.deploy.github.priv"

- name: Clone Vundle for vim plugins
  git:
    repo: 'https://github.com/VundleVim/Vundle.vim.git'
    dest: "{{ HOME }}/.vim/bundle/Vundle.vim"

- name: Clone tpm for tmux plugins
  git:
    repo: 'https://github.com/tmux-plugins/tpm.git'
    dest: "{{ CONFIG_PERSO }}/tmux/plugins/tpm"

- name: Register existence of workstation config links
  stat:
    path: "{{ item.dest }}"
  loop: "{{ links_to_create }}"
  register: link_register

- name: Remove workstation config file if some default exists (not links)
  file:
    path: "{{ item.stat.path }}"
    state: absent
  loop: "{{ link_register.results }}"
  when: item.stat.islnk is defined and item.stat.islnk == False

- name: Create symbolic link for workstation config tools
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  loop: "{{ links_to_create }}"

- name: Register existence of workstation config links needing sudo
  stat:
    path: "{{ item.dest }}"
  loop: "{{ links_to_create_sudo }}"
  register: link_register_sudo

- name: Remove file to create links (sudo)
  file:
    path: "{{ item.stat.path }}"
    state: absent
  loop: "{{ link_register_sudo.results }}"
  when: item.stat.islnk is defined and item.stat.islnk == False

- name: Create symbolic link for workstation tools needing sudo
  become: true
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  loop: "{{ links_to_create_sudo }}"

#- name: Create local/run directory for mpd if it does not exist
#  file:
#    path: "{{ ansible_env.HOME }}/.local/run/mpd"
#    state: directory
#
#- name: Allow 'wheel' group to have passwordless sudo
#  become: yes
#  lineinfile:
#    dest: /etc/sudoers
#    state: present
#    regexp: '^# %wheel ALL=(ALL) NOPASSWD: ALL'
#    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
#    validate: visudo -cf %s

- name: Installing some software using yay
  yay:
    name:
      - bash-git-prompt
      - tmux-bash-completion-git

#- name: Deactivale 'wheel' group passwordless sudo
#  become: yes
#  lineinfile:
#    dest: /etc/sudoers
#    state: present
#    regexp: '^%wheel ALL=(ALL) NOPASSWD: ALL'
#    line: '# %wheel ALL=(ALL) NOPASSWD: ALL'
#    validate: visudo -cf %s

