# Marking and jumping functions
export MARKPATH=$HOME/.marks
function jump {
  cd -P $MARKPATH/$1 2>/dev/null || echo "No such mark: $1"
}
function mark {
  mkdir -p $MARKPATH; ln -s $(pwd) $MARKPATH/$1
}
function unmark {
  rm -i $MARKPATH/$1
}
function marks {
  ls -l $MARKPATH | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}

function svim {
  $EDITOR $(fd --type f . ./ | fzf)
}
function scd {
  cd $(fd --type d . ./ | fzf)
}

function mcd() {
  mkdir -p "$1" && cd "$1";
}

n (){
  ($* ; notify-send "Command over" "$*")
}

dockerxecl() {
  docker exec -it $(docker ps -l -q) /bin/bash ;
}

bt_connect() {
  bluetoothctl -- connect $(bluetoothctl -- paired-devices | cut -f 2- -d ' ' | fzf | cut -f 1 -d ' ')
}

qrterm() {
  qrencode -t UTF8 -o /tmp/qr.txt "$@" && cat /tmp/qr.txt
  rm -f /tmp/qr.txt
}

qrpass() {
  if [ -z $@ ];
  then
    echo "Asked for empty password"
  else
    pass "$@" | tr -d '\n' | qrencode -t UTF8 -o /tmp/qr.txt && cat /tmp/qr.txt && rm /tmp/qr.txt
  fi
}

smount() {
  sudo mount $(fd . /dev | grep "sd\|mmcblk" | fzf --preview=lsblk) $(fd . /mnt | grep "sdcard\|usb\|hdd")
}

sumount() {
  sudo umount $(fd . /mnt | grep "sdcard\|usb\|hdd" | fzf --preview=lsblk)
}

paste2file() {
  DEFAULT=/tmp/clip.txt
  FILE=${1-$DEFAULT}
  DIR=$(dirname "${FILE}")
  if [ $FILE != $DEFAULT ] ; then
    if [ -f $FILE ] ; then
      if [ -w $FILE ]; then
        read -p "File $FILE already exists; overwrite? y/n`echo $'\n> '` " yn
        case $yn in
          [Yy]* ) echo "Overwrite file";;
          [Nn]* ) return ;;
        esac
      else
        echo "The file $FILE exists and is not writable, using default: $DEFAULT"
        FILE="$DEFAULT"
      fi
    else
      if [ -w $DIR ]; then
        :
      else
        echo "The file $FILE does not exist and cannot be created, using default: $DEFAULT"
        FILE="$DEFAULT"
      fi
    fi
  fi
  xsel --output --clipboard > $FILE

  echo "Pasted clipboard content to $FILE"
  NUMBER_OF_PASTED_LINES=$(wc -l /tmp/clip.txt | awk '{print $1}')


  if [ $NUMBER_OF_PASTED_LINES -gt 6 ] ; then
    echo "..."
  fi
  tail -6 $FILE
  echo ""
}

vimall() {
  ag . -l | xargs bash -c '</dev/tty vim "$@"' ignoreme
}

rlk () {
  if [ -z $@ ];
  then
    link=$(readlink -f ./)
  else
    link=$(readlink -f $@)
  fi
  echo $link | copy
  echo "Copied: $link"
}

connect() {
  chosen_network = $(sudo iw dev wlp2s0 scan | grep SSID | awk '{print $2}' | fzf)
  echo $chosen_network
}

# fuzzy grep open via ag with line number
agvim() {
  local file
  local line

  read -r file line <<<"$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]; then
    vim $file +$line
  fi
}

# I don't understand thiss script right now; need to figure out what is goin on and how to use it or remove it"
replace() {
  grep -rl "$1" | xargs -n 1 sed -i "s/$1/$2/g"
}

sanitize() {
  echo $1 | sed -e 's/[,.;/><|:&]//g' -e 's/ /_/g'
}

# capture the output of a command so it can be retrieved with ret
cap () {
  tee /tmp/capture.out
}

ret() {
  cat /tmp/capture.out
}

fzf_change_directory() {
  local directory=$(
    fd --type d | \
    fzf --query="$1" --no-multi --select-1 --exit-0 \
    --preview 'tree -C {} | head -100'
  )
  if [[ -n $directory ]]; then
    cd "$directory"
  fi
}

alias fcd='fzf_change_directory'

fzf_find_edit() {
  local file=$(
    fzf --query="$1" --no-multi --select-1 --exit-0 \
      --preview 'bat --color=always --line-range :500 {}'
  )
  if [[ -n $file ]]; then
    $EDITOR "$file"
  fi
}

alias f='fzf_find_edit'

fzf_git_log() {
  local selections=$(
    git ll --color=always "$@" |
    fzf --ansi --no-sort --no-height \
    --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
    xargs -I@ sh -c 'git show --color=always @'"
  )
  if [[ -n $selections ]]; then
    local commits=$(echo "$selections" | sed 's/^[* |]*//' | cut -d' ' -f1 | tr '\n' ' ')
    git show $commits
  fi
}

alias gll='fzf_git_log'

fzf_jump() {
  local marks=$(
    fd --type l . ~/.marks | \
    fzf --query="$1" --no-multi --select-1 --exit-0 \
    --preview 'tree -C {} | head -100'
  )
  if [[ -n $marks ]]; then
    cd -P "$marks"
  fi
}
alias sj='fzf_jump'

function allrecent() {
  fd --changed-within ${1:-48h} . /home /etc
}

extract_yml() {
  if [ -n $1 ]; then
    echo "---"
    cat $1 | sed -n -e '/^```yml$/,/^```$/{ /^```yml$/d; s/^```$/---/; p; }'
  fi
}

choose_from_cwds() {
  for PROCID in $(pgrep '^zsh$'); do
      readlink -f /proc/$PROCID/cwd
  done \
    | sort -u \
    | fzf --query="$1" --no-multi --select-1 --exit-0 \
      --preview 'tree -C {} | head -100'
}

alias jd='cd $(choose_from_cwds)'

genrand() {
  rand_string=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-8})
  echo "@$rand_string"
}

find_network_rpis() {
  sudo nmap -sP 192.168.1.0/24 | grep -i "b8:27:eb\|dc:a6:32" -B2
}
sapk() {
  doas apk add $(apk search | sed 's/\(.*\)-/\1 /'| sed 's/\(.*\)-/\1 /' | fzf | cut -d' ' -f1)
}

superdiff() {
  file_to_diff=$(git diff $@ --name-only | fzf -m --ansi --preview 'git diff $@ --color=always -- {-1} | bat --color=always --line-range :500')
  git diff --color=always $file_to_diff | bat
}
